{"version":3,"sources":["images/heads.jpg","images/tails.jpg","logo.svg","Coin.js","CoinFlipper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coin","className","src","this","props","imgSrc","Component","CoinFlipper","state","flipping","currCoin","nFlips","nHeads","nTails","handleClick","bind","flipCoin","arr","Math","floor","random","length","newCoin","choice","coins","setState","st","side","setTimeout","e","flip","headsImg","tailsImg","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,yECA3CD,EAAOC,QAAU,IAA0B,kC,qLCa5BC,G,6KARP,OACI,yBAAKC,UAAU,QACvB,yBAAKC,IAAKC,KAAKC,MAAMC,c,GAJNC,c,wCCGbC,E,kDAQF,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CAClBC,UAAU,EACDC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACzB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKN,SAAW,EAAKA,SAASM,KAAd,gBAXK,E,mDAcZE,GAEH,OAAOA,EADWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,W,iCAKjD,IAAMC,EAAUnB,KAAKoB,OAAOpB,KAAKC,MAAMoB,OACvCrB,KAAKsB,UAAS,SAAAC,GACV,MAAO,CACfjB,UAAU,EACEC,SAAUY,EACVX,OAAQe,EAAGf,OAAS,EACpBC,OAAQc,EAAGd,QAA2B,UAAjBU,EAAQK,KAAmB,EAAI,GACpDd,OAAQa,EAAGb,QAA2B,UAAjBS,EAAQK,KAAmB,EAAI,OAGlEC,WAAWzB,KAAKM,SAAU,O,iCAI1BN,KAAKsB,SAAS,CAAChB,UAAU,M,kCAGXoB,GACR1B,KAAKa,a,+BAIX,IAAIc,EAAO3B,KAAKK,MAAMC,SACnB,yBAAKR,UAAU,eAChB,yBAAKA,UAAU,cACd,yBAAKC,IAAK6B,OAEX,yBAAK9B,UAAU,cACd,yBAAKC,IAAK8B,QAGV,6BACA7B,KAAKK,MAAME,UAAY,kBAAC,EAAD,CAAML,OAAQF,KAAKK,MAAME,SAASL,SAC1D,4BAAQ4B,QAAS9B,KAAKW,aAAtB,YACCX,KAAKK,MAAME,UAAY,2BAAG,iDAAuBP,KAAKK,MAAME,SAASiB,KAA3C,OACf,qCACHxB,KAAKK,MAAMG,OADR,2BACwCR,KAAKK,MAAMI,OAAQ,IAD3D,aAEET,KAAKK,MAAMK,OAFb,YAMR,OACI,yBAAKZ,UAAU,iBACX,kDACC6B,O,GAxESxB,aAApBC,EACK2B,aAAe,CAClBV,MAAO,CACH,CAAEG,KAAM,QAAStB,OAAQ0B,KACzB,CAAEJ,KAAM,QAAStB,OAAQ2B,OA0EtBzB,QCvEA4B,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCIcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.15be4436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heads.99a10729.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tails.43f803d7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport './Coin.css'\n\nclass Coin extends Component{\n    render(){\n        return(\n            <div className=\"Coin\">\n\t\t\t\t<img src={this.props.imgSrc} />\n\t\t\t</div>\n        );\n    }\n}\n\nexport default Coin;","import React, { Component } from 'react';\nimport Coin from './Coin';\nimport './CoinFlipper.css';\nimport headsImg from './images/heads.jpg'\nimport tailsImg from './images/tails.jpg'\n\nclass CoinFlipper extends Component {\n    static defaultProps = {\n        coins: [\n            { side: \"heads\", imgSrc: headsImg },\n            { side: \"tails\", imgSrc: tailsImg }\n        ]\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\t\t\tflipping: false,\n            currCoin: null,\n            nFlips: 0,\n            nHeads: 0,\n            nTails: 0\n        };\n        this.handleClick = this.handleClick.bind(this);\n\t\tthis.flipCoin = this.flipCoin.bind(this);\n\t\tthis.flipping = this.flipping.bind(this);\n    }\n\n    choice(arr) {\n        let randomIndex = Math.floor(Math.random() * arr.length);\n        return arr[randomIndex];\n    }\n\n    flipCoin() {\n        const newCoin = this.choice(this.props.coins);\n        this.setState(st => {\n            return {\n\t\t\t\tflipping: true,\n                currCoin: newCoin,\n                nFlips: st.nFlips + 1,\n                nHeads: st.nHeads + (newCoin.side === \"heads\" ? 1 : 0),\n                nTails: st.nTails + (newCoin.side === \"tails\" ? 1 : 0)\n            };\n        });\n\t\tsetTimeout(this.flipping, 1000);\n    }\n\n\tflipping(){\n\t\tthis.setState({flipping: false});\n\t}\n\n    handleClick(e) {\n        this.flipCoin();\n    }\n\n    render() {\n\t\tlet flip = this.state.flipping \n\t\t? \t<div className=\"CoinFlipper\">\n\t\t\t\t<div className=\"heads face\">\n\t\t\t\t\t<img src={headsImg} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"tails face\">\n\t\t\t\t\t<img src={tailsImg} />\n\t\t\t\t</div>\n\t\t\t</div> \n\t\t: \t<div>\n\t\t\t\t{this.state.currCoin && <Coin imgSrc={this.state.currCoin.imgSrc}/>}\n\t\t\t\t<button onClick={this.handleClick}>Flip Me!</button>\n\t\t\t\t{this.state.currCoin && <p><strong>**You flipped {this.state.currCoin.side}**</strong></p>}\n                <p>\n\t\t\t\t\tOut of {this.state.nFlips} flips, there have been {this.state.nHeads}{\" \"}\n\t\t\t\t  \theads and {this.state.nTails} tails.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\n        return (\n            <div className='CoinContainer'>\n                <h2>Let's Flip A Coin!</h2>\n                {flip}\n            </div>\n        );\n    }\n}\n\nexport default CoinFlipper;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CoinFlipper from './CoinFlipper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinFlipper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}